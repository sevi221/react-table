{"version":3,"sources":["components/Navbar.js","components/TableHeader.js","components/Search.js","components/Table.js","components/Pagination.js","pages/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","title","icon","map","nv","i","href","TableHeader","tHeaders","onSorting","useState","sortingField","setSortingField","sortingOrder","setSortingOrder","name","field","isSortable","onClick","order","onSortingChange","Search","onSearch","search","setSearch","type","placeholder","value","onChange","e","target","Table","questionData","setQuestionData","sorting","setSorting","useEffect","fetch","then","response","json","res","questions","Object","entries","results","key","item","push","id","category","difficulty","question","catch","err","console","error","questionsDataTable","useMemo","computedQuestions","reversed","sort","a","b","localeCompare","filter","toLowerCase","includes","val","qt","Pagination","currentPage","paginationItems","pages","Layout","totalItems","total","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d4ee74a.chunk.js","sourcesContent":["import React from 'react';\nimport \"../Scss/Navbar.scss\"\n\nconst Navbar = () => {\n\n  const navSections = [\n    { title: \"BROWSE\", icon: \"bars\"},\n    { title: \"ADD NEW QUESTIONS\", icon: \"plus\"},\n    { title: \"API\", icon: \"gears\"},\n    { title: \"DISCUSS\", icon: \"comments\"},\n    { title: \"LOGIN\", icon: \"sign-in\"},\n   \n];\n  return (\n    <div className=\"navbar-container\">\n      <ul>\n        {navSections.map((nv, i)=>(\n          <li key={i}>\n            <a href=\"#\">\n              <i className={`fa fa-${nv.icon}`}></i>\n              {nv.title}</a>\n            </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Navbar;","import React, { useState} from 'react';\nimport '../Scss/Table.scss';\n\nconst TableHeader = ({ tHeaders, onSorting }) => {\n    const [sortingField, setSortingField] = useState(\"\");\n    const [sortingOrder, setSortingOrder] = useState(\"asc\");\n\n    const onSortingChange = (field) => {\n        const order =\n            field === sortingField && sortingOrder === \"asc\" ? \"desc\" : \"asc\";\n\n        setSortingField(field);\n        setSortingOrder(order);\n        onSorting(field, order);\n    };\n\n\n    return (\n        <>\n            <thead>\n                <tr>\n                    {tHeaders.map(({ name, field, isSortable }) => (\n                        <th\n                            key={name}\n                            className=\"theader\"\n                        >\n                            {name}\n                            {isSortable && (\n                                <button\n                                    className=\"button-sort\"\n                                    onClick={() =>\n                                        isSortable ? onSortingChange(field) : null\n                                    }>\n                                    <i className=\"fa fa-sort\"></i>\n                                </button>)}\n                        </th>\n                    ))}\n                </tr>\n            </thead>\n        </>\n    );\n}\n\nexport default TableHeader;","import React, { useState } from \"react\";\n\nconst Search = ({ onSearch }) => {\n    const [search, setSearch] = useState(\"\");\n\n    const handleInputChange = value => {\n        setSearch(value);\n        onSearch(value);\n    };\n    return (\n        <input\n            type=\"text\"\n            placeholder=\"Question search...\"\n            value={search}\n            onChange={e => handleInputChange(e.target.value)}\n        />\n    );\n};\n\nexport default Search;","import React, { useState, useEffect, useMemo } from 'react';\nimport TableHeader from '../components/TableHeader';\nimport '../Scss/Table.scss';\nimport Search from './Search';\n\n\nconst Table = () => {\n    // TODO como próximos pasos implementaría un spinner o un skeleton con \n    // un loading para mostrar al usuario que se está realizando la llamada \n    // que recupera los datos. También añadiría un modal de error en el caso \n    // de que exista algún error en la carga.\n\n    const [questionData, setQuestionData] = useState([]);\n    const [sorting, setSorting] = useState({ field: \"\", order: \"\" });\n    const [search, setSearch] = useState(\"\");\n\n    // Si queremos ordenar por alguna otra categoría, solo tendremos que \n    // cambiar la propiedad isSortable a true.\n    const tHeaders = [\n        { name: \"ID\", field: \"id\", isSortable: true },\n        { name: \"Category\", field: \"category\", isSortable: false },\n        { name: \"Type\", field: \"type\", isSortable: false },\n        { name: \"Difficulty\", field: \"difficulty\", isSortable: true },\n        { name: \"Question / Statement\", field: \"question\", isSortable: false },\n        { name: \"Created By\", field: \"author\", isSortable: false }\n    ];\n\n    useEffect(() => {\n        const fetchData = () => {\n            fetch('https://opentdb.com/api.php?amount=10')\n                .then(response => response.json())\n                .then((res) => {\n                    let questions = [];\n                    for (let [key, item] of Object.entries(res.results)) {\n                        questions.push({\n                            id: key,\n                            category: item.category,\n                            type: item.type,\n                            difficulty: item.difficulty,\n                            question: item.question,\n                        })\n                    }\n                    setQuestionData(questions)\n                }\n                )\n                .catch(err => console.error(err))\n        }\n        fetchData()\n    }, [])\n\n    const questionsDataTable = useMemo(() => {\n        let computedQuestions = questionData;\n\n        if (sorting.field) {\n            const reversed = sorting.order === \"asc\" ? 1 : -1;\n            computedQuestions = computedQuestions.sort(\n                (a, b) =>\n                    reversed * b[sorting.field].localeCompare(a[sorting.field])\n            );\n        }\n        if (search) {\n            computedQuestions = computedQuestions.filter(\n                computedQuestions =>\n                    computedQuestions.question.toLowerCase().includes(search.toLowerCase())\n            );\n        }\n        return computedQuestions\n\n    }, [questionData, sorting, search]);\n\n\n    return (\n        <>\n            <Search\n                onSearch={val => setSearch(val)}\n            />\n            <table className=\"table-container tborder\">\n                <TableHeader\n                    tHeaders={tHeaders}\n                    onSorting={(field, order) =>\n                        setSorting({ field, order })\n                    }\n                />\n                <tbody>\n                    {questionsDataTable?.map((qt, i) => (\n                        <tr key={i}>\n                            <td>{`94${qt.id}`}</td>\n                            <td>{qt.category}</td>\n                            <td>{qt.type}</td>\n                            <td>{qt.difficulty}</td>\n                            <td>{qt.question}</td>\n                            <td><a href=\"#\">{`user`}</a></td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </>\n    );\n}\n\nexport default Table;","import React, { useMemo } from 'react';\nimport '../Scss/Pagination.scss';\n\nconst Pagination = ({\n    currentPage = 1,\n}) => {\n\n// TODO: este componente debería recibir el totalItems que \n// queremos mostrar como una prop que viene establecido \n// desde el componente padre (Layout). En este caso hemos\n// forzado para que muestre 5 elementos. \n// Lo ideal sería que la paginación fuese de servidor y \n// la llamada fetch recuperase dinámicamente los resultados. \n\n    const paginationItems = useMemo(() => {\n        const pages = [];\n        for (let i = 1; i <= 5; i++) {\n            pages.push(\n                <li key={i}>\n                    <a>{i}</a>\n                </li>\n            );\n        }\n        return pages;\n    }, []);\n\n    return (\n        <>\n            <div className=\"pagination-container\">\n                <ul className=\"pagination-list\">\n                    {paginationItems}\n                </ul>\n            </div>\n        </>\n    );\n}\n\nexport default Pagination;","import React, { useState } from 'react';\n\n//COMPONENTS\nimport Navbar from '../components/Navbar';\nimport Table from '../components/Table';\nimport Pagination from '../components/Pagination';\nimport '../Scss/Layout.scss'\n\nconst Layout = () => {\n    // TODO: para la paginación hay que definir una constante \n    // con el total de páginas que queremos mostrar en el footer \n    // y pasarlo como props al componente Pagination  \n    const [totalItems, setTotalItems] = useState(0);\n    return (\n        <>\n            <nav>\n                <Navbar />\n            </nav>\n            <main className=\"front-container\">\n                <h1>Browse Questions</h1>\n                <Table />\n                <Pagination\n                    total={totalItems}\n                />\n            </main>\n        </>\n    );\n}\n\nexport default Layout;","import Layout from './pages/Layout';\n\nfunction App() {\n  return (\n    <>\n     <Layout/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'whatwg-fetch';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}